// Ref: https://github.com/Satellite-im/Uplink/blob/dev/ui/build.rs

use glob::glob;
use grass::Options;
use std::{
    error::Error,
    fs::{self, File},
    io::Write,
};

fn main() -> Result<(), Box<dyn Error>> {
    // Create the file that will hold the compiled CSS.
    let sass_output = "./src/styles.css";
    let mut sass = File::create(sass_output)?;

    // Create the string that will hold the concatenated contents of all SASS files.
    let mut css =
        String::from("/* This file is automatically generated, edits will be overwritten. */\n");

    // Use glob to read all SASS files in the `src` directory and its subdirectories.
    let entries = glob("src/**/*.sass").map_err(|e| format!("Failed to read glob pattern: {e}"))?;

    // Compile SASS to CSS
    let options = Options::default()
        .input_syntax(grass::InputSyntax::Sass)
        .load_path("src");

    // Concatenate the contents of each SASS file into the `contents` string.
    for entry in entries {
        let path = entry?;
        let data = fs::read_to_string(path)?;
        println!("{data}");
        css += grass::from_string(data.to_owned(), &options)?.as_ref();
    }

    // Write the compiled CSS to the `sass` file.
    sass.write_all(&css.as_bytes())?;
    sass.flush()?;

    Ok(())
}
